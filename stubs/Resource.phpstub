<?php

namespace %NAMESPACE%;

use Koellich\Persources\Resource;

class %RESOURCE% extends Resource
{
    /**
     * @var string Unique name of this resource. Can be used in Persources::getResourceByName($name)
     */
    public string $name = '%RESOURCE%';

    /**
     * @var string Full qualified name of the Model that this resource represents.
     */
    public string $model = %MODEL%;

    /**
     * @var string Singular Name of the resource.
     */
    public string $singularName = %SINGULAR_NAME%;

    /**
     * @var string Plural name of the resource.
     */
    public string $pluralName = %PLURAL_NAME%;

    /**
     * @var array Array of permissions (string) that are handled by this resource.
     */
    public array $permissions = %PERMISSIONS%;

    /**
     * @var array Array of actions that are available.
     */
    public array $actions = %ACTIONS%;

    /**
     * Column Definitions
     *
     * Available keys are:
     *
     * name: string - name of DB column
     * dbType: string - type of the column in the DB; null for transient columns
     * label: string - human readable name
     * showInList: boolean - show this column in a list view?
     * showOnSingleItem: boolean - show this column in a single item view?
     * readonly: boolean - should this column be presented read-only?
     * htmlType: select, radiogroup, checkboxgroup or https://www.w3schools.com/html/html_form_input_types.asp
     * choices: array(value => label) - map of choices for type select, radiogroup of checkboxgroup
     * placeholder: string - placeholder for html input element
     * required: boolean - make html input element required?
     * class: string - class attribute on html input element
     * pattern: string - pattern attribute on the html input element
     *
     * @var array Array of Column Definitions
     */
    public function columnDefinitions(): array
    {
        return %COLUMN_DEFS%;
    }

    /**
     * Datasets are different sets of data (i.e. diefferent queries) that can be used to get items.
     *
     * Available keys are:
     *
     * name: string
     * query: fn ($query) => $query->doSomethingWithIt(...)
     *
     * @returns array Array of Datasets
     */
    public function datasets(): array
    {
        return [
            ['name' => __('resources.dataset_default'), 'query' => fn ($query) => $query],
        ];
    }

    /**
     * Append the $query such that a search is performed using the given $search string.
     * The default implementation does nothing. Subclasses can override this to implement search.
     *
     * @param ?string $search
     * @return mixed Return the modified $query
     */
    public function addSearchClause($query, ?string $search)
    {
        return $query;
    }
}